import { Button, TextInput } from '@carbon/react';
import { EditIcon, ResetIcon } from '@openmrs/esm-framework';
import React, { useState } from 'react';
import { useController, UseControllerProps } from 'react-hook-form';
import { useTranslation } from 'react-i18next';

interface IdentifierInputProps {
  autoGenerated: boolean;
  onReset: () => void;
}

const IdentifierInput: React.FC<UseControllerProps & IdentifierInputProps> = (props) => {
  const { t } = useTranslation();
  const { field, fieldState } = useController(props);
  const [manualEntry, setManualEntry] = useState(false);

  const handleResetClick = () => {
    setManualEntry(false);
    props.onReset();
  };

  const toggle = manualEntry ? (
    <Button
      size="md"
      kind="ghost"
      type="button"
      iconDescription={t('resetIdentifierTooltip', 'Reset')}
      onClick={handleResetClick}
      hasIconOnly>
      <ResetIcon />
    </Button>
  ) : (
    <Button
      size="md"
      kind="ghost"
      type="button"
      iconDescription={t('editIdentifierTooltip', 'Edit')}
      onClick={() => setManualEntry(true)}
      hasIconOnly>
      <EditIcon />
    </Button>
  );

  return (
    <div style={{ display: 'flex', alignItems: 'end' }}>
      <TextInput
        id="identifier"
        labelText={t('identifier', 'Identifier')}
        {...field}
        placeholder={props.autoGenerated && !manualEntry ? t('autoGeneratedPlaceholderText', 'Auto-generated') : ''}
        readOnly={props.autoGenerated && !manualEntry}
        invalid={!!fieldState.error}
        invalidText={fieldState.error?.message}
      />
      {toggle}
    </div>
  );
};

export default IdentifierInput;
